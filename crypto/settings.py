"""
Django settings for crypto project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from celery.schedules import crontab

BASE_DIR = Path(__file__).resolve().parent.parent

DEBUG = True

ALLOWED_HOSTS = ['*']

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'db_u',
        'PORT': 5432,
    }
}

import django
import os


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
    'crypto.apps.myAppNameConfig',
    'django_celery_beat',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

import environ

env = environ.Env()
environ.Env.read_env()
SECRET_KEY = env('SECRET_KEY')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crypto.urls'

WSGI_APPLICATION = 'crypto.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '[DJANGO] %(levelname)s %(asctime)s %(module)s '
                      '%(name)s.%(funcName)s:%(lineno)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        }
    },
    'loggers': {
        'crypto': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        }
    },
}

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

timezone = 'Europe/London'

USE_I18N = True

USE_TZ = True

STATIC_URL = 'static/'

CELERY_BEAT_SCHEDULE = {
    "btc": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='0,15,30,45', hour='*'),
        "args": ('btc', ),
    },
    "gold": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='1,16,31,46', hour='*'),
        "args": ('gold', ),
    },
    "silver": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='2,17,32,47', hour='*'),
        "args": ('silver', )
    },
    "platinum": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='3,18,33,48', hour='*'),
        "args": ('platinum', ),
    },
    "eth": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='4,19,34,49', hour='*'),
        "args": ('eth', ),
    },
    "ltc": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='5,20,35,50', hour='*'),
        "args": ('ltc', )
    },
    "eur": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='0,15,30,45', hour='*'),
        "args": ('eur',),
    },
    "pln": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='1,16,31,46', hour='*'),
        "args": ('pln',),
    },
    "jpy": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='2,17,32,47', hour='*'),
        "args": ('jpy',),
    },
    "gbp": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='3,18,33,48', hour='*'),
        "args": ('gbp',),
    },
    "huf": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='4,19,34,49', hour='*'),
        "args": ('huf',),
    },
    "try": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='5,20,35,50', hour='*'),
        "args": ('try',),
    },
    "sek": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='6,21,36,51', hour='*'),
        "args": ('sek',),
    },
    "chf": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='7,22,37,52', hour='*'),
        "args": ('chf',),
    },
    "rub": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='8,23,38,53', hour='*'),
        "args": ('rub',),
    },
    "nok": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='9,24,39,54', hour='*'),
        "args": ('nok',),
    },
    "cad": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='10,25,40,55', hour='*'),
        "args": ('cad',),
    },
    "inr": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='11,26,41,56', hour='*'),
        "args": ('inr',),
    },
    "czk": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='12,27,42,57', hour='*'),
        "args": ('czk',),
    },
    "hrk": {
        "task": "crypto.tasks.update_asset_price_on_server",
        "schedule": crontab(minute='13,28,43,58', hour='*'),
        "args": ('hrk',),
    },
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
django.setup()
